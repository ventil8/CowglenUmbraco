@using System.Linq
@using System.Xml.Linq
@using umbraco.MacroEngines
@using uBlogsy.Common.Extensions
@using uBlogsy.Common.Helpers
@using uBlogsy.BusinessLogic
@{
    const int ITEMS_PER_PAGE = 20; // for testing
    
    // get item count
    int count = int.Parse(@Parameter.ItemCount);

    IEnumerable<DynamicNode> nodes;

    if (@Parameter.Small == "1")
    {
        var posts = PostService.Instance.GetPosts(Model.Id);
        nodes = ((IEnumerable<DynamicNode>)posts).Take(count);
        
        <div class="uBlogsy_posts_container uBlogsy_bottom_border">
        <h2>@Dictionary["uBlogsyDicPostsLatest"]</h2>
            <ul>
                @foreach (DynamicNode n in nodes)
                {
                    <li>
                        <a href="@n.Url" title="@n.GetProperty("uBlogsyContentTitle").Value">
                            <span>@n.GetProperty("uBlogsyContentTitle").Value</span>
                        </a>
                       @* - <span>@n.GetProperty("uBlogsyPostDate").Value.FormatDateTimeOrdinal("d MMMM yyyy")</span>*@
                    </li>
                }
            </ul>
        </div>
    }
    else
    {
        // get tag, category, or author from query string
        var tag = Request.QueryString["tag"];
        var category = Request.QueryString["category"];
        var author = Request.QueryString["author"];
        var searchTerm = Request.QueryString["search"];
        var commenter = Request.QueryString["commenter"];
        int page = int.TryParse(Request.QueryString["page"], out page) ? page : 1;

        IEnumerable<DynamicNode> posts = PostService.Instance.GetPosts(Model.Id, tag, category, author, searchTerm, commenter, page - 1, count);

        // get landing node
        var landing = DataService.Instance.GetLanding(Model.Id);

        // only get posts where the path has the landing node's id.
        posts = posts.Where(x => x.Path.Contains(landing.Id + ","));
        
        nodes = posts.Take(count).ToList();

        int postCount = PostService.Instance.GetPosts(Model.Id, tag, category, author, searchTerm, commenter, 0, int.MaxValue).Count;
        
        // pagination
        @RenderPagination(page, postCount, count)
                
        // render search result count when this script is displaying search results
        if (!string.IsNullOrEmpty(searchTerm))
        {
            <script type="text/javascript">
                $(document).ready(function () {
                    $('.uBlogsy_content_body').hide();
                });
            </script>
            <h3>@nodes.Count() Results: </h3>
        }
        
        // show each post
        foreach (DynamicNode n in nodes)
        {
            @RenderPage("/macroScripts/uBlogsy/uBlogsyShowPost.cshtml", n.Id)
        }
    }
 }




@helper RenderPagination(int page, int postCount, int itemsPerPage)
{
    int pages = (int)Math.Ceiling((double)postCount / (double)itemsPerPage);
         
    string url = Request.Url.ToString();
    string querystring = Request.Url.Query;
    
    <ul id="uBlogsy_pagination">

        @* render prev link *@
        <li class="uBlogsy_page_prev">
            @if (page > 1)
            {
                url = url.ReplaceQueryStringItem("page", (page - 1).ToString());
                <a href="@url" >Prev</a>
            }else{
                <span>Prev</span>
            }
        </li>

        @* render page links *@
        @for (int i = 1; i < pages+1; i++)
        {
            url = url.ReplaceQueryStringItem("page", i.ToString());
            string liClass = i == page ? "uBlogsy_current" : string.Empty;
            
            <li class="uBlogsy_page_item @liClass">
                @if(page == i){
                    <span>@i</span> 
                }else{
                    <a href="@url">@i</a>
                }
            </li>
        }
       
        @* render next link *@
        <li class="uBlogsy_page_next">
            @if (page < Math.Ceiling((double)postCount/itemsPerPage))
            {
                url = url.ReplaceQueryStringItem("page", (page + 1).ToString());
                <a href="@url" >Next</a>
            }
            else
            {
                <span>Next</span>
            }
        </li>
    </ul>
}